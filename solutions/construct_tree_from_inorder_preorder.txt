class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int, int> in_map;
        for (int i = 0; i < inorder.size(); ++i)
            in_map[inorder[i]] = i;
        int preIndex = 0;
        return helper(preorder, in_map, preIndex, 0, inorder.size() - 1);
    }
    TreeNode* helper(vector<int>& preorder, unordered_map<int, int>& in_map, int& preIndex, int inStart, int inEnd) {
        if (inStart > inEnd) return nullptr;
        int rootVal = preorder[preIndex++];
        TreeNode* root = new TreeNode(rootVal);
        root->left = helper(preorder, in_map, preIndex, inStart, in_map[rootVal] - 1);
        root->right = helper(preorder, in_map, preIndex, in_map[rootVal] + 1, inEnd);
        return root;
    }
};
